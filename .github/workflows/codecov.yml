name: Codecov

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  LUA_INCLUDE_DIR: /usr/include/luajit-2.1
  LUA_LIBRARIES: /usr/lib/x86_64-linux-gnu/libluajit-5.1.a

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Setup dependency
      run: |
          sudo apt-get install -y luajit libluajit-5.1-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -E env CFLAGS="-fprofile-arcs -ftest-coverage" cmake -DLUA_INCLUDE_DIR=${{env.LUA_INCLUDE_DIR}} -DLUA_LIBRARIES=${{env.LUA_LIBRARIES}} -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        gcov: true
        gcov_ignore: test/**
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
